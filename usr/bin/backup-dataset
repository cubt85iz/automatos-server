#!/usr/bin/env bash

# Creates a backup for the specified dataset and uploads to Backblaze B2.

set -euox pipefail

DATASET=$1
RECURSIVE=${2:-n}

# Create snapshot for provided dataset
create_snapshot() {
  case $RECURSIVE in
    Y|y|yes|1)
      zfs snapshot -r "$DATASET@$TIMESTAMP"
      ;;
    *)
      zfs snapshot "$DATASET@$TIMESTAMP"
      ;;
  esac
}

# Back up snapshot to Borg repository
backup_snapshot() {
  SERVICE="${DATASET##*/}"
  SNAPSHOT="$DATASET@$TIMESTAMP"
  if zfs list -H -t snapshot "$SNAPSHOT"; then
    if [ -n "$BACKUP_PATH" ]; then
      if [ ! -d "$BACKUP_PATH" ]; then
        BORG_PASSPHRASE="$BACKUP_KEY" borg init -e repokey "$BACKUP_PATH"

        KEY_PATH="${BACKUP_PATH%/*}/keys"
        if [ ! -d "$KEY_PATH" ]; then
          mkdir -p "$KEY_PATH"
        fi
        BORG_PASSPHRASE="$BACKUP_KEY" borg key export "$BACKUP_PATH" > "$KEY_PATH/$SERVICE"
        BORG_PASSPHRASE="$BACKUP_KEY" borg key export --paper "$BACKUP_PATH" > "$KEY_PATH/$SERVICE.txt"
      fi

      BORG_PASSPHRASE="$BACKUP_KEY" borg create "$BACKUP_PATH::$SERVICE@$TIMESTAMP" "/var/$DATASET/.zfs/snapshot/$TIMESTAMP"
    else
      echo "Please provide a valid repository path."
      exit 1
    fi
  else
    echo "Please provide a valid ZFS snapshot."
    exit 1
  fi
}

# Compares backup archive against source snapshot to validate backup integrity
validate_backup() {
  RESULT=1
  SERVICE="${DATASET##*/}"
  SNAPSHOT="$DATASET@$SNAPSHOT_NAME"

  # Create temporary directory to mount borg archive.
  ARCHIVE_PATH="/var/tmp/$SERVICE-$TIMESTAMP"
  if [ -d "$ARCHIVE_PATH" ] || mkdir "$ARCHIVE_PATH"; then

    # Mount borg archive
    ARCHIVE="$SERVICE@$TIMESTAMP"
    BORG_PASSPHRASE="$BACKUP_KEY" borg mount "$BACKUP_PATH::$ARCHIVE" "$ARCHIVE_PATH"

    # Generate diff of archive vs. snapshot
    MOUNTPOINT=$(zfs get -H -o value mountpoint "$DATASET")
    SNAPSHOT_PATH="$MOUNTPOINT/.zfs/snapshot/$SNAPSHOT"
    if diff "$SNAPSHOT_PATH" "$ARCHIVE_PATH"; then
      RESULT=0
    fi

    # Unmount borg archive
    BORG_PASSPHRASE="$BACKUP_KEY" borg umount "$ARCHIVE_PATH"

    # Remove temporary directory
    rmdir "$ARCHIVE_PATH"

  fi

  exit $RESULT
}

# Prune old snapshots that are outside retention policy.
prune_snapshots() {
  # Prune and compact borg archives.
  BORG_PASSPHRASE="$BACKUP_KEY" borg prune -d "$KEEP_DAILY" -w "$KEEP_WEEKLY" -m "$KEEP_MONTHLY" -y "$KEEP_YEARLY" "$BACKUP_PATH"
  BORG_PASSPHRASE="$BACKUP_KEY" borg compact "$BACKUP_PATH"

  # Prune ZFS snapshots for archives that aren't in borg repository. 
  mapfile -t ARCHIVES < <(BORG_PASSPHRASE="$BACKUP_KEY" borg list --json "$BACKUP_PATH" | jq -r '.archives[].archive')
  mapfile -t SNAPSHOTS < <(zfs list -H -o name -t snapshot "$DATASET")
  for SNAPSHOT in "${SNAPSHOTS[@]}"
  do
    SHORTENED_SNAPSHOT_NAME=${SNAPSHOT##*/}
    if [[ ! " ${ARCHIVES[*]} " =~ [[:space:]]${SHORTENED_SNAPSHOT_NAME}[[:space:]] ]]; then
      case $RECURSIVE in
        Y|y|yes|1)
          zfs destroy -r "$SNAPSHOT"
          ;;
        *)
          zfs destroy "$SNAPSHOT"
          ;;
      esac
    fi
  done
}

# Upload Borg repository
upload_snapshot() {
  SERVICE="${DATASET##*/}"
  BUCKET="$SERVICE.$(hostname --fqdn)"
  BUCKET=${BUCKET//./-}
  if [ -n "$BACKUP_PATH" ] && [ -d "$BACKUP_PATH" ]; then
    for REMOTE in "${BACKUP_REMOTES[@]}"; do
      if [ -n "$BUCKET" ]; then
        if ! rclone lsd "$REMOTE:$BUCKET"; then
          rclone mkdir "$REMOTE:$BUCKET"
        fi
        rclone sync "$BACKUP_PATH" "$REMOTE:$BUCKET"
      else
        echo "Please provide a bucket name."
        exit 1
      fi
    done
  else
    echo "Please provide a valid backup path."
    exit 1
  fi
}

# Get date/time information
YEAR=$(date +%Y)
MONTH=$(date +%m)
DAY=$(date +%d)
TIME=$(date +%H-%M-%S)
TIMESTAMP="${YEAR}-${MONTH}-${DAY}_${TIME}"

# Main process
if zfs list -H -t filesystem "$DATASET"; then
  create_snapshot || exit 1
  backup_snapshot || exit 1
  prune_snapshots || exit 1
  upload_snapshot || exit 1
else
  echo "Please provide a valid ZFS dataset."
  exit 1
fi
