#!/usr/bin/env bash

# Creates a backup for the specified dataset and uploads to Backblaze B2.

set -euo pipefail

DATASET=$1
PERIODICITY=$2
RECURSIVE=${3:-n}
TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)

create_snapshot() {
  if [ -n "$DATASET" ] && zfs list -H -t filesystem "$DATASET"; then
    if [ -n "$PERIODICITY" ]; then
      case $RECURSIVE in
        Y|y|yes|1)
          zfs snapshot -r "$DATASET@$TIMESTAMP-$PERIODICITY"
          ;;
        *)
          zfs snapshot "$DATASET@$TIMESTAMP-$PERIODICITY"
          ;;
      esac
    else
      echo "Please provide a valid snapshot periodicity. Valid values are daily, weekly, monthly, yearly."
      exit 1
    fi
  else
    echo "Please provide a valid ZFS dataset."
    exit 1
  fi
}

backup_snapshot() {
  SERVICE="${DATASET##*/}"
  SNAPSHOT_NAME="$TIMESTAMP-$PERIODICITY"
  SNAPSHOT="$DATASET@$SNAPSHOT_NAME"
  if zfs list -H -t snapshot "$SNAPSHOT"; then
    if [ -n "$BACKUP_PATH" ]; then
      if [ ! -d "$BACKUP_PATH" ]; then
        BORG_PASSPHRASE="$BACKUP_KEY" borg init -e repokey "$BACKUP_PATH"

        KEY_PATH="${BACKUP_PATH%/*}/keys"
        if [ ! -d "$KEY_PATH" ]; then
          mkdir -p "$KEY_PATH"
        fi
        BORG_PASSPHRASE="$BACKUP_KEY" borg key export "$BACKUP_PATH" > "$KEY_PATH/$SERVICE"
        BORG_PASSPHRASE="$BACKUP_KEY" borg key export --paper "$BACKUP_PATH" > "$KEY_PATH/$SERVICE.txt"
      fi

      BORG_PASSPHRASE="$BACKUP_KEY" borg create "$BACKUP_PATH::${DATASET#*/}@$SNAPSHOT_NAME" "/var/$DATASET/.zfs/snapshot/$SNAPSHOT_NAME"
    else
      echo "Please provide a valid repository path."
      exit 1
    fi
  else
    echo "Please provide a valid ZFS snapshot."
    exit 1
  fi
}

upload_to_b2() {
  SERVICE="${DATASET##*/}"
  BUCKET="$SERVICE.$(hostname --fqdn)"
  BUCKET=${BUCKET//./-}
  if [ -n "$BACKUP_PATH" ] && [ -d "$BACKUP_PATH" ]; then
    if [ -n "$BUCKET" ]; then
      if ! rclone lsd "$RCLONE_REMOTE:$BUCKET"; then
        rclone mkdir "$RCLONE_REMOTE:$BUCKET"
      fi
      rclone sync "$BACKUP_PATH" "$RCLONE_REMOTE:$BUCKET"
    else
      echo "Please provide a bucket name."
      exit 1
    fi
  else
    echo "Please provide a valid backup path."
    exit 1
  fi
}

prune_snapshots() {
  # Determine maximum number of snapshots to retain
  case $PERIODICITY in
    daily)
      COUNT="$KEEP_DAILY"
      ;;
    weekly)
      COUNT="$KEEP_WEEKLY"
      ;;
    monthly)
      COUNT="$KEEP_MONTHLY"
      ;;
    yearly)
      COUNT="$KEEP_YEARLY"
      ;;
    *)
      echo "Invalid periodicity value: $PERIODICITY"
      exit 1
      ;;
  esac

  if zfs list -H -t filesystem "$DATASET"; then
    if [ -n "$PERIODICITY" ]; then
      if [ -n "$COUNT" ]; then
        SNAPSHOT_COUNT=$(zfs list -H -t snapshot "$DATASET" | grep -c "$PERIODICITY")
        if [ "$SNAPSHOT_COUNT" -gt "$COUNT" ]; then
          OLD_SNAPSHOT_COUNT=$((SNAPSHOT_COUNT - COUNT))
          echo "Pruning $OLD_SNAPSHOT_COUNT $TYPE snapshots."

          mapfile -t OLD_SNAPSHOTS < <(zfs list -H -t snapshot "$DATASET" | grep "$PERIODICITY" | head -n "$OLD_SNAPSHOT_COUNT")
          for SNAPSHOT in "${OLD_SNAPSHOTS[@]}"; do
            case $RECURSIVE in
              Y|y|yes|1)
                zfs destroy -r "$SNAPSHOT"
                ;;
              *)
                zfs destroy "$SNAPSHOT"
                ;;
            esac
          done
        fi
      else
        echo "Retention policy undefined for snapshot type."
        exit 1
      fi
    else
      echo "Please provide a valid snapshot type. Valid values are daily, weekly, monthly, yearly."
      exit 1
    fi
  else
    echo "Please provide a valid ZFS dataset."
    exit 1
  fi
}

create_snapshot || exit 1
backup_snapshot || exit 1
upload_to_b2 || exit 1
prune_snapshots || exit 1
