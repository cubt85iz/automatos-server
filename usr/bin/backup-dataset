#!/usr/bin/env bash

# Creates a backup for the specified dataset and uploads to Backblaze B2.

set -euo pipefail

DATASET=$1
RECURSIVE=${2:-n}

# Create snapshot for provided dataset
create_snapshot() {
  case $RECURSIVE in
    Y|y|yes|1)
      zfs snapshot -r "$DATASET@$TIMESTAMP-$PERIODICITY"
      ;;
    *)
      zfs snapshot "$DATASET@$TIMESTAMP-$PERIODICITY"
      ;;
  esac
}

# Back up snapshot to Borg repository
backup_snapshot() {
  SERVICE="${DATASET##*/}"
  SNAPSHOT_NAME="$TIMESTAMP-$PERIODICITY"
  SNAPSHOT="$DATASET@$SNAPSHOT_NAME"
  if zfs list -H -t snapshot "$SNAPSHOT"; then
    if [ -n "$BACKUP_PATH" ]; then
      if [ ! -d "$BACKUP_PATH" ]; then
        BORG_PASSPHRASE="$BACKUP_KEY" borg init -e repokey "$BACKUP_PATH"

        KEY_PATH="${BACKUP_PATH%/*}/keys"
        if [ ! -d "$KEY_PATH" ]; then
          mkdir -p "$KEY_PATH"
        fi
        BORG_PASSPHRASE="$BACKUP_KEY" borg key export "$BACKUP_PATH" > "$KEY_PATH/$SERVICE"
        BORG_PASSPHRASE="$BACKUP_KEY" borg key export --paper "$BACKUP_PATH" > "$KEY_PATH/$SERVICE.txt"
      fi

      BORG_PASSPHRASE="$BACKUP_KEY" borg create "$BACKUP_PATH::${DATASET#*/}@$SNAPSHOT_NAME" "/var/$DATASET/.zfs/snapshot/$SNAPSHOT_NAME"
    else
      echo "Please provide a valid repository path."
      exit 1
    fi
  else
    echo "Please provide a valid ZFS snapshot."
    exit 1
  fi
}

# Upload Borg repository to Backblaze
upload_to_b2() {
  SERVICE="${DATASET##*/}"
  BUCKET="$SERVICE.$(hostname --fqdn)"
  BUCKET=${BUCKET//./-}
  if [ -n "$BACKUP_PATH" ] && [ -d "$BACKUP_PATH" ]; then
    if [ -n "$BUCKET" ]; then
      if ! rclone lsd "$RCLONE_REMOTE:$BUCKET"; then
        rclone mkdir "$RCLONE_REMOTE:$BUCKET"
      fi
      rclone sync "$BACKUP_PATH" "$RCLONE_REMOTE:$BUCKET"
    else
      echo "Please provide a bucket name."
      exit 1
    fi
  else
    echo "Please provide a valid backup path."
    exit 1
  fi
}

# Prune old snapshots that are outside retention policy.
prune_snapshots() {
  SNAPSHOT_COUNT=$(zfs list -H -t snapshot "$DATASET" | grep -c "$PERIODICITY")
  if [ "$SNAPSHOT_COUNT" -gt "$MAX_SNAPSHOTS" ]; then
    OLD_SNAPSHOT_COUNT=$((SNAPSHOT_COUNT - MAX_SNAPSHOTS))
    echo "Pruning $OLD_SNAPSHOT_COUNT $TYPE snapshots."

    mapfile -t OLD_SNAPSHOTS < <(zfs list -H -t snapshot "$DATASET" | grep "$PERIODICITY" | head -n "$OLD_SNAPSHOT_COUNT")
    for SNAPSHOT in "${OLD_SNAPSHOTS[@]}"; do
      case $RECURSIVE in
        Y|y|yes|1)
          zfs destroy -r "$SNAPSHOT"
          ;;
        *)
          zfs destroy "$SNAPSHOT"
          ;;
      esac
    done
  fi
}

# Get date/time information
YEAR=$(date +%Y)
MONTH=$(date +%m)
DAY=$(date +%d)
WEEKDAY=$(date +%w)
TIME=$(date +%H-%M-%S)
TIMESTAMP="${YEAR}-${MONTH}-${DAY}_${TIME}"

# Dynamically determine periodicity
if [ -n "$KEEP_YEARLY" ] && [ "$KEEP_YEARLY" -gt 0 ] && [ "$MONTH" = "1" ] && [ "$DAY" = "1" ]; then
  PERIODICITY="yearly"
  MAX_SNAPSHOTS=$KEEP_YEARLY
elif [ -n "$KEEP_MONTHLY" ] && [ "$KEEP_MONTHLY" -gt 0 ] && [ "$DAY" = "1" ]; then
  PERIODICITY="monthly"
  MAX_SNAPSHOTS=$KEEP_MONTHLY
elif [ -n "$KEEP_WEEKLY" ] && [ "$KEEP_WEEKLY" -gt 0 ] && [ "$WEEKDAY" = "0" ]; then
  PERIODICITY="weekly"
  MAX_SNAPSHOTS=$KEEP_WEEKLY
elif [ -n "$KEEP_DAILY" ] && [ "$KEEP_DAILY" -gt 0 ]; then
  PERIODICITY="daily"
  MAX_SNAPSHOTS=$KEEP_DAILY
fi

# Main process
if zfs list -H -t filesystem "$DATASET"; then
  if [ -n "$PERIODICITY" ]; then
    create_snapshot || exit 1
    backup_snapshot || exit 1
    upload_to_b2 || exit 1
    prune_snapshots || exit 1
  else
    echo "No backup policy for ZFS dataset."
  fi
else
  echo "Please provide a valid ZFS dataset."
  exit 1
fi
